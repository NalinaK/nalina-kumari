
package com.circlesquare.serviceprovider.ui;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;


import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.circlesquare.serviceprovider.R;
import com.circlesquare.serviceprovider.data.SPTechnician;
import com.circlesquare.serviceprovider.services.AddTechnicianService;
import com.circlesquare.serviceprovider.services.ServiceReceiver;
import com.circlesquare.serviceprovider.util.ServiceProvider;
import com.circlesquare.serviceprovider.util.ServiceProviderLocalStore;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.weiwangcn.betterspinner.library.material.MaterialBetterSpinner;

import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.File;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;


public class EditTechnicianDetails extends AppCompatActivity implements ServiceReceiver.Listener, AdapterView.OnItemSelectedListener{
    @Override
    public void onNothingSelected(AdapterView<?> parent) {

    }

    EditText technicianNameEt, technicianMobileNumberET, technicianPasswordET, uploadPhotoEditText,
            technicianEmailIdET,technicianSkillsEt, technnicianExperienceEt;

    TextView photoFileName;
    private static final String IMAGE_DIRECTORY_NAME = "DelC Photos";
    private static final int CAMERA_CAPTURE_IMAGE_REQUEST_CODE = 1;
    private static final int MEDIA_CAMERA = 100;
    private static int GALLERY_IMAGE_REQUEST_CODE = 3;
    private Uri fileUri;
    File file;
    ImageView photoImageView;
    Button submit;
    MaterialBetterSpinner technicianEducationSpinner;
    long technicianId;
    String technicianname;
    String MobileNo;
    String Password;
    String EmailId;
    int Experience;
    String skills;
    String Education;
    String Photo;
    Bundle bundleanimation;
    String invoiceNumber;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_technician);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if(getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            toolbar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    onBackPressed();
                }
            });
        }
        statusDialog = new ProgressDialog(EditTechnicianDetails.this);
        statusDialog.setIndeterminate(false);
        statusDialog.setCancelable(false);
        Bundle bundle=getIntent().getExtras();

        // String msg= (String) bundle.getCharSequence("id");
        //Log.d("hai", String.valueOf(msg));
        // technicianNameEt.setText(bundle.getString("Mobile"));
        technicianId= Long.parseLong(bundle.getString("technicianid"));
        technicianname=(bundle.getString("technicianName"));
        MobileNo=(bundle.getString("mobileNo"));
        Password=(bundle.getString("password"));
        EmailId=(bundle.getString("mailId"));
        Experience= Integer.parseInt((bundle.getString("experience")));
        skills=(bundle.getString("skills"));
        Education=(bundle.getString("education"));
        Photo=(bundle.getString("photo"));

        technicianNameEt = (EditText)findViewById(R.id.technicianName);
        technicianMobileNumberET = (EditText)findViewById(R.id.technicianMobileNumber);
        technicianPasswordET = (EditText)findViewById(R.id.technicianPassword);
        uploadPhotoEditText = (EditText)findViewById(R.id.technicianPhotoEditText);
        photoFileName = (TextView) findViewById(R.id.imageFileName);
        technicianEmailIdET = (EditText)findViewById(R.id.technicianEmailId);
        technnicianExperienceEt = (EditText)findViewById(R.id.technicianExperience);
        technicianSkillsEt = (EditText)findViewById(R.id.technicianSkills);
        String[] SPINNER_DATA = {"Below SSC","SSC","12th","ITI","Diploma","Graduate"};
        technicianEducationSpinner = (MaterialBetterSpinner)findViewById(R.id.technicianEducationSpinner);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(EditTechnicianDetails.this,android.R.layout.simple_list_item_1, SPINNER_DATA);
        technicianEducationSpinner.setAdapter(adapter);

        technicianNameEt.setText(technicianname);
        technicianMobileNumberET.setText(MobileNo);
        technicianPasswordET.setText(Password);
        technicianEmailIdET.setText(EmailId);
        technnicianExperienceEt.setText(Experience);
        technicianSkillsEt.setText(skills);
        technicianEducationSpinner.setSelection(adapter.getPosition(Education));

        uploadPhotoEditText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectPhoto();
            }
        });

        photoImageView = (ImageView)findViewById(R.id.technicianPhotoImageView);
        photoFileName.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ServiceProvider.showImageInAlertDialog(EditTechnicianDetails.this, photoImageView);
            }
        });
        submit = (Button) findViewById(R.id.submit);
        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(areAllValid()){
                    String name = technicianNameEt.getText().toString();
                    String mobileNo = technicianMobileNumberET.getText().toString();
                    password = technicianPasswordET.getText().toString();
                    String emailId = technicianEmailIdET.getText().toString();
                    String skills = technicianSkillsEt.getText().toString();
                    int experience = Integer.parseInt(technnicianExperienceEt.getText().toString());
                    String education = technicianEducationSpinner.getText().toString();

                    ServiceProviderLocalStore store = new ServiceProviderLocalStore(EditTechnicianDetails.this);
                    int serviceCenterId = store.getLoggedInServiceProvider().getServiceProviderId();
                    checkForExistingTechnicianAndAddIfNot(name, mobileNo,emailId,education,skills,experience,serviceCenterId);
                }
                uploadTechnicianPhoto();
            }
        });
    }
    public void uploadTechnicianPhoto() {
        new AddTechnicianPhoto().execute();
    }
    ProgressDialog progressDialog;
    private class AddTechnicianPhoto extends AsyncTask<Void, Void, Integer> {
        @Override
        protected void onPreExecute() {
            progressDialog = new ProgressDialog(EditTechnicianDetails.this);
            progressDialog.setMessage("Submitting");
            progressDialog.setIndeterminate(false);
            progressDialog.setCancelable(false);
            progressDialog.show();
        }

        @Override
        protected Integer doInBackground(Void... params) {
            publishProgress();
            int response = addTechPhoto();
            publishProgress();
            return response;
        }
        @Override
        protected void onPostExecute(Integer response) {
            if(progressDialog.isShowing())
                progressDialog.dismiss();

            if ((response == 200 || response == 0)) {
                Toast.makeText(EditTechnicianDetails.this, "Success", Toast.LENGTH_SHORT).show();
            }
        }
    }
    public int addTechPhoto() {
        HttpURLConnection connection;
        int response = 600;
        MultipartEntity reqEntity = new MultipartEntity();
        if(imagePath != null) {
            File file;
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isCameraUpload && this.file != null){
                file = this.file;
            } else
                file = new File(imagePath);

            FileBody bin = new FileBody(file);
            reqEntity.addPart("file",bin);
        }
        try{
            URL url = new URL(ServiceProvider.IP+"/SPTechnician/update/");
            connection = (HttpURLConnection) url.openConnection();
            // Allow Outputs (sending)
            //  connection.setDoOutput(true);
            connection.setUseCaches(false);
            // Enable POST method
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Connection", "Keep-Alive");
            connection.addRequestProperty("Content-length", reqEntity.getContentLength()+"");
            connection.addRequestProperty(reqEntity.getContentType().getName(), reqEntity.getContentType().getValue());
            connection.connect();
            reqEntity.writeTo(connection.getOutputStream());
            response = connection.getResponseCode();
            connection.disconnect();
            return response;
        }catch(Exception e){
            e.printStackTrace();
            return response;
        }
    }

    public void onItemSelected(AdapterView<?> parent, View view, int position, long id){
        String item = parent.getItemAtPosition(position).toString();
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    }

    String password, photo;
    ArrayList<String> filePaths;
    private void selectPhoto() {
        final CharSequence[] items = { "Take Photo", "Select Image","Cancel" };
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Upload Photo");
        filePaths = new ArrayList<>();
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                if (items[item].equals("Take Photo")) {
                    checkPermissionAndTakePhoto();
                } else if (items[item].equals("Select Image")) {
                    checkPermissionAndSelectImage();
                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        AlertDialog alertDialog = builder.create();
        alertDialog.getListView().setDividerHeight(1);
        alertDialog.getListView().setDivider(ContextCompat.getDrawable(this,R.drawable.divider));
        alertDialog.show();
    }

    private static File getOutputMediaFile(int type) {
        // External sdcard location
        File mediaStorageDir = new File(android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES),
                IMAGE_DIRECTORY_NAME);

        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()&& !mediaStorageDir.mkdirs()) {
            Log.d(IMAGE_DIRECTORY_NAME, "Oops! Failed to create "
                    + IMAGE_DIRECTORY_NAME + " directory");
            return null;
        }
        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
                Locale.getDefault()).format(new Date());
        File mediaFile;
        if (type == MEDIA_CAMERA) {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator
                    + "IMG_" + timeStamp + ".jpg");
        } else {
            return null;
        }
        return mediaFile;
    }

    public void checkPermissionAndSelectImage(){
        if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            // Check Permissions Now
            // Callback onRequestPermissionsResult interceptado na Activity MainActivity
            ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                    GALLERY_IMAGE_REQUEST_CODE);
        } else {
            Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            // Start the Intent
            startActivityForResult(galleryIntent, GALLERY_IMAGE_REQUEST_CODE);
        }
    }
    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {

        if (requestCode == CAMERA_CAPTURE_IMAGE_REQUEST_CODE) {
            if (grantResults.length == 1
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                checkPermissionAndTakePhoto();
            } else if (grantResults.length == 2
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED
                    && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                checkPermissionAndTakePhoto();
            } else {
                Toast.makeText(EditTechnicianDetails.this, "You haven't given permission to upload photo", Toast.LENGTH_LONG).show();
            }
        } else if (requestCode == GALLERY_IMAGE_REQUEST_CODE) {
            if (grantResults.length == 1
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Log.e("Calling ","external storage");
                Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

                startActivityForResult(galleryIntent, GALLERY_IMAGE_REQUEST_CODE);
            } else {
                Toast.makeText(EditTechnicianDetails.this, "You haven't given permission to read external storage", Toast.LENGTH_LONG).show();
            }
        }
    }

    public void checkPermissionAndTakePhoto(){
        try {
            if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                    != PackageManager.PERMISSION_GRANTED ||
                    ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                            != PackageManager.PERMISSION_GRANTED) {
                // Check Permissions Now
                // Callback onRequestPermissionsResult interceptado na Activity MainActivity
                if(ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{android.Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                } else if(ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{android.Manifest.permission.CAMERA},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                } else{ //for read external storage
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                }

            } else {
                // permissions has been granted, continue as usual
                Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                file = getOutputMediaFile(MEDIA_CAMERA);
                if(file != null) {
                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                        fileUri = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", file);
                    } else
                        fileUri = Uri.fromFile(file);
                    cameraIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    cameraIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, fileUri);
                    startActivityForResult(cameraIntent, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
            Toast.makeText(this, "Sorry, Unable to take photo.", Toast.LENGTH_SHORT).show();
        }
    }

    String imagePath;
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        photoFileName.setVisibility(View.GONE);
        //Display image from a path to ImageView after capturing  image
        if (requestCode == CAMERA_CAPTURE_IMAGE_REQUEST_CODE && resultCode == RESULT_OK) {
            try {
                if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED) {
                    // Check Permissions Now
                    // Callback onRequestPermissionsResult interceptado na Activity MainActivity
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                            10);
                }else {
                    displayImageFromUri(fileUri);
                }

            } catch (Exception e) {
                e.printStackTrace();
                if(isCameraUpload)
                    isCameraUpload = false;
                Toast.makeText(this, "Sorry, unable to retrieve the selected image. Try again.", Toast.LENGTH_SHORT).show();
            }
        } else  if (requestCode == GALLERY_IMAGE_REQUEST_CODE && resultCode == RESULT_OK && null != data) {
            // Get the Image from data
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
            Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);
            if(cursor != null) {
                cursor.moveToFirst();
                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                String imgDecodableString = cursor.getString(columnIndex);
                cursor.close();
                imagePath = imgDecodableString;
                photoFileName.setVisibility(View.VISIBLE);
                photoFileName.setText(imagePath);
                displayImageFromUri(selectedImage);
            } else{
                Toast.makeText(this, "Sorry, unable to retrieve the selected image. Try again.", Toast.LENGTH_SHORT).show();
            }
        }
    }
    boolean isCameraUpload;
    void displayImageFromUri(Uri fileUri){

        photoFileName.setText(ServiceProvider.getFileName(this, fileUri));
        photoFileName.setVisibility(View.VISIBLE);

        photoImageView.setVisibility(View.GONE);

        imagePath = fileUri.getPath();
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)
            isCameraUpload = true;
        Log.e("imagePath",""+fileUri.getPath());
        Log.e("imagePath",""+fileUri.toString());
        Log.e("imagePath",""+imagePath);
        ServiceProvider.setLocalImageToImageView(this,fileUri, photoImageView);
    }
    public boolean areAllValid(){
        String string_name = technicianNameEt.getText().toString();

        if (string_name.equals("") || string_name.equals(" ") || !string_name.matches("[a-zA-Z ]*")) {
            technicianNameEt.setError("Please enter valid Name");
            technicianNameEt.requestFocus();
            return false;
        } else
        if(!(technicianMobileNumberET.length() == 10 && technicianMobileNumberET.getText().toString().matches("[0-9]*") && technicianMobileNumberET.getText().toString().matches("^[7-9][0-9]{9}$")))
        {
            technicianMobileNumberET.setError("Enter valid Mobile number");
            return false;
        }
        else if(technicianPasswordET.getText().toString().length() == 0) {
            technicianPasswordET.setError("Enter technician password");
            return false;
        }


        else if(technnicianExperienceEt.getText().toString() ==null || technnicianExperienceEt.getText().toString().isEmpty())
        {
            technnicianExperienceEt.setError("Enter technician experience");
            return false;
        }
        else if(technicianSkillsEt.getText().toString().length() == 0){
            technicianSkillsEt.setError("Enter technician skills");
            return false;
        }

//          else if(!isInvoiceUploaded()){
//              return false;
//          }
        else if(technicianEmailIdET.getText().toString().length() > 0)
            if(!ServiceProvider.isValidEmail(technicianEmailIdET.getText().toString())) {
                technicianEmailIdET.setError("Enter valid email id");
                return false;
            }

        return true;
    }
    public boolean isInvoiceUploaded(){
        if(imagePath == null){
            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setMessage("Please upload Photo of Technician");
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            selectPhoto();
                        }
                    });
            alertDialog.show();

            return false;
        }else{
            return true;
        }

    }
    public static File technicianPhotoFile;
    ProgressDialog statusDialog;
    public void callAddService(String name, String mobileNo, String email, int serviceCenterId,String education, int experience,String skills){
        Intent i = new Intent(EditTechnicianDetails.this, AddTechnicianService.class);
        ServiceReceiver receiver = new ServiceReceiver(new Handler(Looper.getMainLooper()));
        receiver.setListener(EditTechnicianDetails.this);
        i.putExtra("rec", receiver);
        i.putExtra("mobile", mobileNo);
        i.putExtra("email", email);
        i.putExtra("name", name);
        i.putExtra("education",education);
        i.putExtra("experience",experience);
        i.putExtra("skills",skills);

        if(imagePath != null) {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isCameraUpload && this.file != null){
                technicianPhotoFile = this.file;
            } else
                technicianPhotoFile = new File(imagePath);
        }

        ServiceProviderLocalStore serviceProviderLocalStore = new ServiceProviderLocalStore(EditTechnicianDetails.this);
        i.putExtra("gcmtoken", serviceProviderLocalStore.getAppInstanceId());
        i.putExtra("serviceCenterId",serviceCenterId);
        SPTechnician technician = new SPTechnician();
        technician.setSPTechnicianName(name);
        technician.setMobileNo(mobileNo);
        technician.setMailId(email);
        technician.setEducation(education);
        technician.setExperience(experience);
        technician.setSkills(skills);
        technician.setServicePartnerId(serviceProviderLocalStore.getCurrentServiceProviderId());
        technician.setPassword(password);

        i.putExtra(ServiceProvider.TECHNICIAN, new Gson().toJson(technician));

        statusDialog.setMessage("Adding...");
        statusDialog.show();
        startService(i);
    }

    @Override
    public void onReceiveResult(int resultCode, Bundle resultData) {
        if(statusDialog != null && statusDialog.isShowing())
            statusDialog.dismiss();
        if (resultCode == 0 || resultCode == 200 ){
            String Id = resultData.getString("User_Id");

            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setTitle("Success");
            alertDialog.setMessage("Technician successfully added");
            alertDialog.setIcon(R.drawable.tick);
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            startActivity(new Intent(EditTechnicianDetails.this, ServiceProviderTabbedActivity.class));
                        }
                    });
            alertDialog.show();
        } else{
            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setTitle("Failure");
            alertDialog.setMessage("Some thing went wrong, while adding Technician");
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
            alertDialog.show();
        }
    }

    public void checkForExistingTechnicianAndAddIfNot(final String name, final String mobileNo, final String email,
                                                      final String education1, final String skill, final int experience1,final int serviceCenterId){

        statusDialog.setMessage("Loading...");
        statusDialog.show();
        RequestQueue queue = Volley.newRequestQueue(this);
        String url = ServiceProvider.IP+"/SPTechnician/bymobile/"+mobileNo;
        Log.e("url",""+url);
        // Request a string response from the provided URL.
        JsonObjectRequest jsonArrayRequest = new JsonObjectRequest(Request.Method.GET,url,new JSONObject(),
                new Response.Listener<JSONObject>(){

                    @Override
                    public void onResponse(JSONObject response) {
                        Log.e("res", "" + response.toString());
                        boolean isExisting = false;
                        if(!response.isNull("SPTechnicianType"))
                            try {
                                JSONArray userArray = response.getJSONArray("SPTechnicianType");
                                ArrayList<SPTechnician> techniciansArrayList = new Gson().fromJson(userArray.toString(), new TypeToken<List<SPTechnician>>(){}.getType());
                                Log.e("array",""+userArray);
                                for(SPTechnician technician : techniciansArrayList){
                                    Log.e("technician",""+technician.toString());
                                    if(technician.getMobileNo().equals(mobileNo)) {
                                        isExisting = true;
                                        break;
                                    }
                                }

                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        if(isExisting){
                            if(statusDialog.isShowing())
                                statusDialog.dismiss();
                            displayAlertDialogForExistingTechncician(mobileNo);
                        } else{
                            callAddService(name,mobileNo,email,serviceCenterId,education1,experience1,skill);
                        }

                    }
                },new Response.ErrorListener(){
            @Override
            public void onErrorResponse(VolleyError error) {
                Log.e("res",""+error.toString());
                if(statusDialog.isShowing())
                    statusDialog.dismiss();
            }
        });
// Add the request to the RequestQueue.
        queue.add(jsonArrayRequest);
    }
    public void displayAlertDialogForExistingTechncician(String mobileNo){
        AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
        alertDialog.setMessage("Technician is already added with mobile number "+mobileNo);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        alertDialog.show();
    }
}


/*
package com.circlesquare.serviceprovider.ui;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;


import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.circlesquare.serviceprovider.R;
import com.circlesquare.serviceprovider.data.SPTechnician;
import com.circlesquare.serviceprovider.services.AddTechnicianService;
import com.circlesquare.serviceprovider.services.ServiceReceiver;
import com.circlesquare.serviceprovider.util.ServiceProvider;
import com.circlesquare.serviceprovider.util.ServiceProviderLocalStore;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.weiwangcn.betterspinner.library.material.MaterialBetterSpinner;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;


public class AddTechnician extends AppCompatActivity implements ServiceReceiver.Listener, AdapterView.OnItemSelectedListener{
    @Override
    public void onNothingSelected(AdapterView<?> parent) {

    }

    EditText technicianNameEt, technicianMobileNumberET, technicianPasswordET, uploadPhotoEditText,
            technicianEmailIdET,technicianSkillsEt, technnicianExperienceEt;;

    TextView photoFileName;
    private static final String IMAGE_DIRECTORY_NAME = "DelC Photos";
    private static final int CAMERA_CAPTURE_IMAGE_REQUEST_CODE = 1;
    private static final int MEDIA_CAMERA = 100;
    private static int GALLERY_IMAGE_REQUEST_CODE = 3;
    private Uri fileUri;
    File file;
    ImageView photoImageView;
    Button submit;
    MaterialBetterSpinner technicianEducationSpinner;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_technician);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if(getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            toolbar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    onBackPressed();
                }
            });
        }
        statusDialog = new ProgressDialog(EditTechnicianDetails.this);
        statusDialog.setIndeterminate(false);
        statusDialog.setCancelable(false);

        technicianNameEt = (EditText)findViewById(R.id.technicianName);
        technicianMobileNumberET = (EditText)findViewById(R.id.technicianMobileNumber);
        technicianPasswordET = (EditText)findViewById(R.id.technicianPassword);
        uploadPhotoEditText = (EditText)findViewById(R.id.technicianPhotoEditText);
        photoFileName = (TextView) findViewById(R.id.imageFileName);
        technicianEmailIdET = (EditText)findViewById(R.id.technicianEmailId);
        technnicianExperienceEt = (EditText)findViewById(R.id.technicianExperience);
        technicianSkillsEt = (EditText)findViewById(R.id.technicianSkills);
        String[] SPINNER_DATA = {"Below SSC","SSC","12th","ITI","Diploma","Graduate"};
        technicianEducationSpinner = (MaterialBetterSpinner)findViewById(R.id.technicianEducationSpinner);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(EditTechnicianDetails.this,android.R.layout.simple_list_item_1, SPINNER_DATA);
        technicianEducationSpinner.setAdapter(adapter);

        uploadPhotoEditText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectPhoto();
            }
        });

        photoImageView = (ImageView)findViewById(R.id.technicianPhotoImageView);
        photoFileName.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ServiceProvider.showImageInAlertDialog(EditTechnicianDetails.this, photoImageView);
            }
        });
        submit = (Button) findViewById(R.id.submit);
        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(areAllValid()){
                    String name = technicianNameEt.getText().toString();
                    String mobileNo = technicianMobileNumberET.getText().toString();
                    password = technicianPasswordET.getText().toString();
                    String emailId = technicianEmailIdET.getText().toString();
                    String skills = technicianSkillsEt.getText().toString();
                    int experience = Integer.parseInt(technnicianExperienceEt.getText().toString());
                    String education = technicianEducationSpinner.getText().toString();

                    ServiceProviderLocalStore store = new ServiceProviderLocalStore(EditTechnicianDetails.this);
                    int serviceCenterId = store.getLoggedInServiceProvider().getServiceProviderId();
                    checkForExistingTechnicianAndAddIfNot(name, mobileNo,emailId,education,skills,experience,serviceCenterId);
                }
            }
        });
    }
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id){
        String item = parent.getItemAtPosition(position).toString();
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    }

    String password, photo;
    ArrayList<String> filePaths;
    private void selectPhoto() {
        final CharSequence[] items = { "Take Photo", "Select Image",
                "Cancel" };
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Upload Photo");
        filePaths = new ArrayList<>();
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                if (items[item].equals("Take Photo")) {
                    checkPermissionAndTakePhoto();
                } else if (items[item].equals("Select Image")) {
                      checkPermissionAndSelectImage();
                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        AlertDialog alertDialog = builder.create();
        alertDialog.getListView().setDividerHeight(1);
        alertDialog.getListView().setDivider(ContextCompat.getDrawable(this,R.drawable.divider));
        alertDialog.show();
    }

    private static File getOutputMediaFile(int type) {
        // External sdcard location
        File mediaStorageDir = new File(android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES),
                IMAGE_DIRECTORY_NAME);

        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()&& !mediaStorageDir.mkdirs()) {
            Log.d(IMAGE_DIRECTORY_NAME, "Oops! Failed to create "
                    + IMAGE_DIRECTORY_NAME + " directory");
            return null;
        }
        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
                Locale.getDefault()).format(new Date());
        File mediaFile;
        if (type == MEDIA_CAMERA) {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator
                    + "IMG_" + timeStamp + ".jpg");
        } else {
            return null;
        }
        return mediaFile;
    }

    public void checkPermissionAndSelectImage(){
        if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            // Check Permissions Now
            // Callback onRequestPermissionsResult interceptado na Activity MainActivity
            ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                    GALLERY_IMAGE_REQUEST_CODE);
        } else {
            Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            // Start the Intent
            startActivityForResult(galleryIntent, GALLERY_IMAGE_REQUEST_CODE);
        }
    }
    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {

        if (requestCode == CAMERA_CAPTURE_IMAGE_REQUEST_CODE) {
            if (grantResults.length == 1
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                checkPermissionAndTakePhoto();
            } else if (grantResults.length == 2
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED
                    && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                checkPermissionAndTakePhoto();
            } else {
                Toast.makeText(EditTechnicianDetails.this, "You haven't given permission to upload photo", Toast.LENGTH_LONG).show();
            }
        } else if (requestCode == GALLERY_IMAGE_REQUEST_CODE) {
            if (grantResults.length == 1
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Log.e("Calling ","external storage");
                Intent galleryIntent = new Intent(Intent.ACTION_PICK,
                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

                startActivityForResult(galleryIntent, GALLERY_IMAGE_REQUEST_CODE);
            } else {
                Toast.makeText(EditTechnicianDetails.this, "You haven't given permission to read external storage", Toast.LENGTH_LONG).show();
            }
        }
    }

    public void checkPermissionAndTakePhoto(){
        try {
            if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                    != PackageManager.PERMISSION_GRANTED ||
                    ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                            != PackageManager.PERMISSION_GRANTED) {
                // Check Permissions Now
                // Callback onRequestPermissionsResult interceptado na Activity MainActivity
                if(ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{android.Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                } else if(ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, android.Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{android.Manifest.permission.CAMERA},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                } else{ //for read external storage
                    ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                            CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                }

            } else {
                // permissions has been granted, continue as usual
                Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
               file = getOutputMediaFile(MEDIA_CAMERA);
                if(file != null) {
                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                        fileUri = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", file);
                    } else
                        fileUri = Uri.fromFile(file);
                    cameraIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    cameraIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, fileUri);
                    startActivityForResult(cameraIntent, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
            Toast.makeText(this, "Sorry, Unable to take photo.", Toast.LENGTH_SHORT).show();
        }
    }

    String imagePath;
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        photoFileName.setVisibility(View.GONE);
        //Display image from a path to ImageView after capturing  image
        if (requestCode == CAMERA_CAPTURE_IMAGE_REQUEST_CODE && resultCode == RESULT_OK) {
                try {
                    if (ActivityCompat.checkSelfPermission(EditTechnicianDetails.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                            != PackageManager.PERMISSION_GRANTED) {
                        // Check Permissions Now
                        // Callback onRequestPermissionsResult interceptado na Activity MainActivity
                        ActivityCompat.requestPermissions(EditTechnicianDetails.this,
                                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                                10);
                    }else {
                        displayImageFromUri(fileUri);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    if(isCameraUpload)
                        isCameraUpload = false;
                    Toast.makeText(this, "Sorry, unable to retrieve the selected image. Try again.", Toast.LENGTH_SHORT).show();
                }
            } else  if (requestCode == GALLERY_IMAGE_REQUEST_CODE && resultCode == RESULT_OK && null != data) {
                // Get the Image from data
                Uri selectedImage = data.getData();
                String[] filePathColumn = { MediaStore.Images.Media.DATA };
                Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);
                if(cursor != null) {
                    cursor.moveToFirst();
                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                    String imgDecodableString = cursor.getString(columnIndex);
                    cursor.close();
                    imagePath = imgDecodableString;
                    photoFileName.setVisibility(View.VISIBLE);
                    photoFileName.setText(imagePath);
                    displayImageFromUri(selectedImage);
                } else{
                    Toast.makeText(this, "Sorry, unable to retrieve the selected image. Try again.", Toast.LENGTH_SHORT).show();
                }
            }
    }
    boolean isCameraUpload;
    void displayImageFromUri(Uri fileUri){

            photoFileName.setText(ServiceProvider.getFileName(this, fileUri));
            photoFileName.setVisibility(View.VISIBLE);

            photoImageView.setVisibility(View.GONE);

            imagePath = fileUri.getPath();
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)
                isCameraUpload = true;
            Log.e("imagePath",""+fileUri.getPath());
            Log.e("imagePath",""+fileUri.toString());
            Log.e("imagePath",""+imagePath);
            ServiceProvider.setLocalImageToImageView(this,fileUri, photoImageView);
        }
      public boolean areAllValid(){
          String string_name = technicianNameEt.getText().toString();
          if (string_name.equals("") || string_name.equals(" ") || !string_name.matches("[a-zA-Z ]*")) {
              technicianNameEt.setError("Please enter valid Name");
              technicianNameEt.requestFocus();
              return false;
          } else
          if(!(technicianMobileNumberET.length() == 10 && technicianMobileNumberET.getText().toString().matches("[0-9]*") && technicianMobileNumberET.getText().toString().matches("^[7-9][0-9]{9}$")))
          {
              technicianMobileNumberET.setError("Enter valid Mobile number");
              return false;
          }
          else if(technicianPasswordET.getText().toString().length() == 0) {
              technicianPasswordET.setError("Enter technician password");
              return false;
          } else if(technnicianExperienceEt.getText().toString() == null ||
                  technnicianExperienceEt.getText().toString().isEmpty()){
              technnicianExperienceEt.setError("Enter technician experience");
              return false;
          }


          else if(technicianSkillsEt.getText().toString().length() == 0){
              technicianSkillsEt.setError("Enter technician skills");
              return false;
          }
          else if(technnicianExperienceEt.length() > 2){
              technnicianExperienceEt.setError("Enter technician experience");
          }

//          else if(!isInvoiceUploaded()){
//              return false;
//          }
          else if(technicianEmailIdET.getText().toString().length() > 0)
          if(!ServiceProvider.isValidEmail(technicianEmailIdET.getText().toString())) {
              technicianEmailIdET.setError("Enter valid email id");
              return false;
          }

          return true;
      }
    public boolean isInvoiceUploaded(){
        if(imagePath == null){
            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setMessage("Please upload Photo of Technician");
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            selectPhoto();
                        }
                    });
            alertDialog.show();

            return false;
        }else{
            return true;
        }

    }
   public static File technicianPhotoFile;
    ProgressDialog statusDialog;
    public void callAddService(String name, String mobileNo, String email, int serviceCenterId,String education, int experience,String skills){
        Intent i = new Intent(EditTechnicianDetails.this, AddTechnicianService.class);
        ServiceReceiver receiver = new ServiceReceiver(new Handler(Looper.getMainLooper()));
        receiver.setListener(EditTechnicianDetails.this);
        i.putExtra("rec", receiver);
        i.putExtra("mobile", mobileNo);
        i.putExtra("email", email);
        i.putExtra("name", name);
        i.putExtra("education",education);
        i.putExtra("experience",experience);
        i.putExtra("skills",skills);

        if(imagePath != null) {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isCameraUpload && this.file != null){
                technicianPhotoFile = this.file;
            } else
                technicianPhotoFile = new File(imagePath);
        }

        ServiceProviderLocalStore serviceProviderLocalStore = new ServiceProviderLocalStore(EditTechnicianDetails.this);
        i.putExtra("gcmtoken", serviceProviderLocalStore.getAppInstanceId());
        i.putExtra("serviceCenterId",serviceCenterId);
        SPTechnician technician = new SPTechnician();
        technician.setSPTechnicianName(name);
        technician.setMobileNo(mobileNo);
        technician.setMailId(email);
        technician.setEducation(education);
        technician.setExperience(experience);
        technician.setSkills(skills);
        technician.setServicePartnerId(serviceProviderLocalStore.getCurrentServiceProviderId());
        technician.setPassword(password);

        i.putExtra(ServiceProvider.TECHNICIAN, new Gson().toJson(technician));

        statusDialog.setMessage("Adding...");
        statusDialog.show();
        startService(i);
    }

    @Override
    public void onReceiveResult(int resultCode, Bundle resultData) {
        if(statusDialog != null && statusDialog.isShowing())
            statusDialog.dismiss();
        if (resultCode == 0 || resultCode == 200 ){
            String Id = resultData.getString("User_Id");

            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setTitle("Success");
            alertDialog.setMessage("Technician successfully added");
            alertDialog.setIcon(R.drawable.tick);
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            startActivity(new Intent(EditTechnicianDetails.this, ServiceProviderTabbedActivity.class));
                        }
                    });
            alertDialog.show();
        } else{
            AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
            alertDialog.setTitle("Failure");
            alertDialog.setMessage("Some thing went wrong, while adding Technician");
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
            alertDialog.show();
        }
    }

    public void checkForExistingTechnicianAndAddIfNot(final String name, final String mobileNo, final String email,
                              final String education1, final String skill, final int experience1,final int serviceCenterId){

        statusDialog.setMessage("Loading...");
        statusDialog.show();
        RequestQueue queue = Volley.newRequestQueue(this);
            String url = ServiceProvider.IP+"/SPTechnician/bymobile/"+mobileNo;
            Log.e("url",""+url);
            // Request a string response from the provided URL.
            JsonObjectRequest jsonArrayRequest = new JsonObjectRequest(Request.Method.GET,url,new JSONObject(),
                    new Response.Listener<JSONObject>(){

                        @Override
                        public void onResponse(JSONObject response) {
                            Log.e("res", "" + response.toString());
                            boolean isExisting = false;
                            if(!response.isNull("SPTechnicianType"))
                                try {
                                    JSONArray userArray = response.getJSONArray("SPTechnicianType");
                                    ArrayList<SPTechnician> techniciansArrayList = new Gson().fromJson(userArray.toString(), new TypeToken<List<SPTechnician>>(){}.getType());
                                    Log.e("array",""+userArray);
                                    for(SPTechnician technician : techniciansArrayList){
                                        Log.e("technician",""+technician.toString());
                                        if(technician.getMobileNo().equals(mobileNo)) {
                                            isExisting = true;
                                            break;
                                        }
                                    }

                                }catch (Exception e){
                                    e.printStackTrace();
                                }
                            if(isExisting){
                                if(statusDialog.isShowing())
                                    statusDialog.dismiss();
                                displayAlertDialogForExistingTechncician(mobileNo);
                            } else{
                                callAddService(name,mobileNo,email,serviceCenterId,education1,experience1,skill);
                            }

                        }
                    },new Response.ErrorListener(){
                      @Override
                      public void onErrorResponse(VolleyError error) {
                        Log.e("res",""+error.toString());
                        if(statusDialog.isShowing())
                           statusDialog.dismiss();
                }
            });
// Add the request to the RequestQueue.
            queue.add(jsonArrayRequest);
    }
    public void displayAlertDialogForExistingTechncician(String mobileNo){
        AlertDialog alertDialog = new AlertDialog.Builder(EditTechnicianDetails.this).create();
        alertDialog.setMessage("Technician is already added with mobile number "+mobileNo);
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "OK",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        alertDialog.show();
    }
}
*/
